Cleaning Data in SQL Queries
/* Standardize Date Format */
-- Convert SaleDate to a standardized date format
UPDATE PortafolioProject..NashvilleHousing
SET SaleDate = CONVERT(Date, SaleDate)

-- Add a new column for standardized SaleDate
ALTER TABLE PortafolioProject..NashvilleHousing
ADD SaleDateConverted Date

-- Update the new column with standardized SaleDate values
UPDATE NashvilleHousing
SET SaleDateConverted = CONVERT(Date, SaleDate)

/* Populate Property Address data */
-- Update missing PropertyAddress values based on matching ParcelID
UPDATE a
SET PropertyAddress = ISNULL(a.PropertyAddress, b.PropertyAddress)
FROM PortafolioProject..NashvilleHousing a
JOIN PortafolioProject..NashvilleHousing b
	ON a.ParcelID = b.ParcelID
	AND a.[UniqueID] <> b.[UniqueID]
WHERE a.PropertyAddress IS NULL

/* Breaking out Address into Individual Columns (Address, City, State) */
-- Add new columns for split address components
ALTER TABLE NashvilleHousing
ADD PropertySplitAddress NVARCHAR(255),
    PropertySplitCity NVARCHAR(255)

-- Update new columns with split address components
UPDATE NashvilleHousing
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) - 1),
    PropertySplitCity = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1, LEN(PropertyAddress))

/* Splitting OwnerAddress into Individual Columns (Address, City, State) */
-- Add new columns for split owner address components
ALTER TABLE NashvilleHousing
ADD OwnerSplitAddress NVARCHAR(255),
    OwnerSplitCity NVARCHAR(255),
    OwnerSplitState NVARCHAR(255)

-- Update new columns with split owner address components
UPDATE NashvilleHousing
SET OwnerSplitAddress = PARSENAME(REPLACE(OwnerAddress, ',', '.'), 3),
    OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress, ',', '.'), 2),
    OwnerSplitState = PARSENAME(REPLACE(OwnerAddress, ',', '.'), 1)

/* Change Y and N to Yes and No in "Sold as Vacant" field */
UPDATE NashvilleHousing
SET SoldAsVacant = CASE WHEN SoldAsVacant = 'Y' THEN 'Yes'
                        WHEN SoldAsVacant = 'N' THEN 'No'
                        ELSE SoldAsVacant
                   END

/* Remove Duplicates */
-- Remove duplicate rows based on specified columns
WITH RowNumCTE AS (
    SELECT *,
           ROW_NUMBER() OVER (PARTITION BY ParcelID, PropertyAddress, SalePrice, SaleDate, LegalReference ORDER BY UniqueID) AS row_num
    FROM PortafolioProject..NashvilleHousing
)
DELETE FROM RowNumCTE
WHERE row_num > 1

/* Delete Unused Columns */
-- Drop unused columns
ALTER TABLE PortafolioProject..NashvilleHousing
DROP COLUMN OwnerAddress,
            TaxDistrict,
            PropertyAddress,
            SaleDate
